
first_test_in_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002e10  08002e10  00012e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e40  08002e40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e40  08002e40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e40  08002e40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e40  08002e40  00012e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e44  08002e44  00012e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b0  2000000c  08002e54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010bc  08002e54  000210bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cda0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cc5  00000000  00000000  0002cddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c70  00000000  00000000  0002eaa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b78  00000000  00000000  0002f718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a7ac  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009b13  00000000  00000000  0004aa3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c9ad  00000000  00000000  0005454f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0efc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003378  00000000  00000000  000f0f78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002df8 	.word	0x08002df8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002df8 	.word	0x08002df8

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f92b 	bl	8000434 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f002 fc80 	bl	8002ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f943 	bl	800049e <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f000 f90b 	bl	800044a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000038 	.word	0x20000038

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000038 	.word	0x20000038

08000294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f003 0307 	and.w	r3, r3, #7
 80002a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <__NVIC_SetPriorityGrouping+0x44>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002aa:	68ba      	ldr	r2, [r7, #8]
 80002ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002b0:	4013      	ands	r3, r2
 80002b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002c6:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <__NVIC_SetPriorityGrouping+0x44>)
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	60d3      	str	r3, [r2, #12]
}
 80002cc:	bf00      	nop
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <__NVIC_GetPriorityGrouping+0x18>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	0a1b      	lsrs	r3, r3, #8
 80002e6:	f003 0307 	and.w	r3, r3, #7
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000306:	2b00      	cmp	r3, #0
 8000308:	db0b      	blt.n	8000322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	f003 021f 	and.w	r2, r3, #31
 8000310:	4907      	ldr	r1, [pc, #28]	; (8000330 <__NVIC_EnableIRQ+0x38>)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	095b      	lsrs	r3, r3, #5
 8000318:	2001      	movs	r0, #1
 800031a:	fa00 f202 	lsl.w	r2, r0, r2
 800031e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000e100 	.word	0xe000e100

08000334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	6039      	str	r1, [r7, #0]
 800033e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000344:	2b00      	cmp	r3, #0
 8000346:	db0a      	blt.n	800035e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	b2da      	uxtb	r2, r3
 800034c:	490c      	ldr	r1, [pc, #48]	; (8000380 <__NVIC_SetPriority+0x4c>)
 800034e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000352:	0112      	lsls	r2, r2, #4
 8000354:	b2d2      	uxtb	r2, r2
 8000356:	440b      	add	r3, r1
 8000358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800035c:	e00a      	b.n	8000374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	b2da      	uxtb	r2, r3
 8000362:	4908      	ldr	r1, [pc, #32]	; (8000384 <__NVIC_SetPriority+0x50>)
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	f003 030f 	and.w	r3, r3, #15
 800036a:	3b04      	subs	r3, #4
 800036c:	0112      	lsls	r2, r2, #4
 800036e:	b2d2      	uxtb	r2, r2
 8000370:	440b      	add	r3, r1
 8000372:	761a      	strb	r2, [r3, #24]
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	e000e100 	.word	0xe000e100
 8000384:	e000ed00 	.word	0xe000ed00

08000388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000388:	b480      	push	{r7}
 800038a:	b089      	sub	sp, #36	; 0x24
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f003 0307 	and.w	r3, r3, #7
 800039a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	f1c3 0307 	rsb	r3, r3, #7
 80003a2:	2b04      	cmp	r3, #4
 80003a4:	bf28      	it	cs
 80003a6:	2304      	movcs	r3, #4
 80003a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003aa:	69fb      	ldr	r3, [r7, #28]
 80003ac:	3304      	adds	r3, #4
 80003ae:	2b06      	cmp	r3, #6
 80003b0:	d902      	bls.n	80003b8 <NVIC_EncodePriority+0x30>
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	3b03      	subs	r3, #3
 80003b6:	e000      	b.n	80003ba <NVIC_EncodePriority+0x32>
 80003b8:	2300      	movs	r3, #0
 80003ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003bc:	f04f 32ff 	mov.w	r2, #4294967295
 80003c0:	69bb      	ldr	r3, [r7, #24]
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	43da      	mvns	r2, r3
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	401a      	ands	r2, r3
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003d0:	f04f 31ff 	mov.w	r1, #4294967295
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	43d9      	mvns	r1, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003e0:	4313      	orrs	r3, r2
         );
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3724      	adds	r7, #36	; 0x24
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
	...

080003f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000400:	d301      	bcc.n	8000406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000402:	2301      	movs	r3, #1
 8000404:	e00f      	b.n	8000426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000406:	4a0a      	ldr	r2, [pc, #40]	; (8000430 <SysTick_Config+0x40>)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	3b01      	subs	r3, #1
 800040c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800040e:	210f      	movs	r1, #15
 8000410:	f04f 30ff 	mov.w	r0, #4294967295
 8000414:	f7ff ff8e 	bl	8000334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <SysTick_Config+0x40>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <SysTick_Config+0x40>)
 8000420:	2207      	movs	r2, #7
 8000422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000424:	2300      	movs	r3, #0
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	e000e010 	.word	0xe000e010

08000434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f7ff ff29 	bl	8000294 <__NVIC_SetPriorityGrouping>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b086      	sub	sp, #24
 800044e:	af00      	add	r7, sp, #0
 8000450:	4603      	mov	r3, r0
 8000452:	60b9      	str	r1, [r7, #8]
 8000454:	607a      	str	r2, [r7, #4]
 8000456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800045c:	f7ff ff3e 	bl	80002dc <__NVIC_GetPriorityGrouping>
 8000460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	68b9      	ldr	r1, [r7, #8]
 8000466:	6978      	ldr	r0, [r7, #20]
 8000468:	f7ff ff8e 	bl	8000388 <NVIC_EncodePriority>
 800046c:	4602      	mov	r2, r0
 800046e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000472:	4611      	mov	r1, r2
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff ff5d 	bl	8000334 <__NVIC_SetPriority>
}
 800047a:	bf00      	nop
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	4603      	mov	r3, r0
 800048a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800048c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ff31 	bl	80002f8 <__NVIC_EnableIRQ>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b082      	sub	sp, #8
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004a6:	6878      	ldr	r0, [r7, #4]
 80004a8:	f7ff ffa2 	bl	80003f0 <SysTick_Config>
 80004ac:	4603      	mov	r3, r0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b084      	sub	sp, #16
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80004be:	2300      	movs	r3, #0
 80004c0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80004c8:	2b02      	cmp	r3, #2
 80004ca:	d005      	beq.n	80004d8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2204      	movs	r2, #4
 80004d0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80004d2:	2301      	movs	r3, #1
 80004d4:	73fb      	strb	r3, [r7, #15]
 80004d6:	e027      	b.n	8000528 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f022 020e 	bic.w	r2, r2, #14
 80004e6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f022 0201 	bic.w	r2, r2, #1
 80004f6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000500:	2101      	movs	r1, #1
 8000502:	fa01 f202 	lsl.w	r2, r1, r2
 8000506:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2201      	movs	r2, #1
 800050c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051c:	2b00      	cmp	r3, #0
 800051e:	d003      	beq.n	8000528 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	4798      	blx	r3
    } 
  }
  return status;
 8000528:	7bfb      	ldrb	r3, [r7, #15]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800053a:	af00      	add	r7, sp, #0
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d102      	bne.n	800054e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000548:	2301      	movs	r3, #1
 800054a:	f000 bef4 	b.w	8001336 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	2b00      	cmp	r3, #0
 800055a:	f000 816a 	beq.w	8000832 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800055e:	4bb3      	ldr	r3, [pc, #716]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	f003 030c 	and.w	r3, r3, #12
 8000566:	2b04      	cmp	r3, #4
 8000568:	d00c      	beq.n	8000584 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800056a:	4bb0      	ldr	r3, [pc, #704]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	f003 030c 	and.w	r3, r3, #12
 8000572:	2b08      	cmp	r3, #8
 8000574:	d159      	bne.n	800062a <HAL_RCC_OscConfig+0xf6>
 8000576:	4bad      	ldr	r3, [pc, #692]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800057e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000582:	d152      	bne.n	800062a <HAL_RCC_OscConfig+0xf6>
 8000584:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000588:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800058c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000590:	fa93 f3a3 	rbit	r3, r3
 8000594:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000598:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800059c:	fab3 f383 	clz	r3, r3
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	095b      	lsrs	r3, r3, #5
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d102      	bne.n	80005b6 <HAL_RCC_OscConfig+0x82>
 80005b0:	4b9e      	ldr	r3, [pc, #632]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	e015      	b.n	80005e2 <HAL_RCC_OscConfig+0xae>
 80005b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005ba:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005be:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80005c2:	fa93 f3a3 	rbit	r3, r3
 80005c6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80005ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005ce:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80005d2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80005d6:	fa93 f3a3 	rbit	r3, r3
 80005da:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80005de:	4b93      	ldr	r3, [pc, #588]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 80005e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005e6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80005ea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80005ee:	fa92 f2a2 	rbit	r2, r2
 80005f2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80005f6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80005fa:	fab2 f282 	clz	r2, r2
 80005fe:	b2d2      	uxtb	r2, r2
 8000600:	f042 0220 	orr.w	r2, r2, #32
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	f002 021f 	and.w	r2, r2, #31
 800060a:	2101      	movs	r1, #1
 800060c:	fa01 f202 	lsl.w	r2, r1, r2
 8000610:	4013      	ands	r3, r2
 8000612:	2b00      	cmp	r3, #0
 8000614:	f000 810c 	beq.w	8000830 <HAL_RCC_OscConfig+0x2fc>
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	f040 8106 	bne.w	8000830 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000624:	2301      	movs	r3, #1
 8000626:	f000 be86 	b.w	8001336 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000634:	d106      	bne.n	8000644 <HAL_RCC_OscConfig+0x110>
 8000636:	4b7d      	ldr	r3, [pc, #500]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a7c      	ldr	r2, [pc, #496]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 800063c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	e030      	b.n	80006a6 <HAL_RCC_OscConfig+0x172>
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d10c      	bne.n	8000668 <HAL_RCC_OscConfig+0x134>
 800064e:	4b77      	ldr	r3, [pc, #476]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a76      	ldr	r2, [pc, #472]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 8000654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000658:	6013      	str	r3, [r2, #0]
 800065a:	4b74      	ldr	r3, [pc, #464]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a73      	ldr	r2, [pc, #460]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 8000660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000664:	6013      	str	r3, [r2, #0]
 8000666:	e01e      	b.n	80006a6 <HAL_RCC_OscConfig+0x172>
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000672:	d10c      	bne.n	800068e <HAL_RCC_OscConfig+0x15a>
 8000674:	4b6d      	ldr	r3, [pc, #436]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a6c      	ldr	r2, [pc, #432]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 800067a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b6a      	ldr	r3, [pc, #424]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a69      	ldr	r2, [pc, #420]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 8000686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	e00b      	b.n	80006a6 <HAL_RCC_OscConfig+0x172>
 800068e:	4b67      	ldr	r3, [pc, #412]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a66      	ldr	r2, [pc, #408]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 8000694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000698:	6013      	str	r3, [r2, #0]
 800069a:	4b64      	ldr	r3, [pc, #400]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a63      	ldr	r2, [pc, #396]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 80006a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80006a6:	4b61      	ldr	r3, [pc, #388]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	f023 020f 	bic.w	r2, r3, #15
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	495d      	ldr	r1, [pc, #372]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 80006b6:	4313      	orrs	r3, r2
 80006b8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d059      	beq.n	8000778 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006c4:	f7ff fdda 	bl	800027c <HAL_GetTick>
 80006c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006cc:	e00a      	b.n	80006e4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006ce:	f7ff fdd5 	bl	800027c <HAL_GetTick>
 80006d2:	4602      	mov	r2, r0
 80006d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	2b64      	cmp	r3, #100	; 0x64
 80006dc:	d902      	bls.n	80006e4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80006de:	2303      	movs	r3, #3
 80006e0:	f000 be29 	b.w	8001336 <HAL_RCC_OscConfig+0xe02>
 80006e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006e8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80006f0:	fa93 f3a3 	rbit	r3, r3
 80006f4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80006f8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006fc:	fab3 f383 	clz	r3, r3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	095b      	lsrs	r3, r3, #5
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b01      	cmp	r3, #1
 800070e:	d102      	bne.n	8000716 <HAL_RCC_OscConfig+0x1e2>
 8000710:	4b46      	ldr	r3, [pc, #280]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	e015      	b.n	8000742 <HAL_RCC_OscConfig+0x20e>
 8000716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800071a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800071e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000722:	fa93 f3a3 	rbit	r3, r3
 8000726:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800072a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800072e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000732:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000736:	fa93 f3a3 	rbit	r3, r3
 800073a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800073e:	4b3b      	ldr	r3, [pc, #236]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 8000740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000742:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000746:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800074a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800074e:	fa92 f2a2 	rbit	r2, r2
 8000752:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000756:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800075a:	fab2 f282 	clz	r2, r2
 800075e:	b2d2      	uxtb	r2, r2
 8000760:	f042 0220 	orr.w	r2, r2, #32
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	f002 021f 	and.w	r2, r2, #31
 800076a:	2101      	movs	r1, #1
 800076c:	fa01 f202 	lsl.w	r2, r1, r2
 8000770:	4013      	ands	r3, r2
 8000772:	2b00      	cmp	r3, #0
 8000774:	d0ab      	beq.n	80006ce <HAL_RCC_OscConfig+0x19a>
 8000776:	e05c      	b.n	8000832 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000778:	f7ff fd80 	bl	800027c <HAL_GetTick>
 800077c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000780:	e00a      	b.n	8000798 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000782:	f7ff fd7b 	bl	800027c <HAL_GetTick>
 8000786:	4602      	mov	r2, r0
 8000788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	2b64      	cmp	r3, #100	; 0x64
 8000790:	d902      	bls.n	8000798 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000792:	2303      	movs	r3, #3
 8000794:	f000 bdcf 	b.w	8001336 <HAL_RCC_OscConfig+0xe02>
 8000798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800079c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80007a4:	fa93 f3a3 	rbit	r3, r3
 80007a8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80007ac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007b0:	fab3 f383 	clz	r3, r3
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	095b      	lsrs	r3, r3, #5
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d102      	bne.n	80007ca <HAL_RCC_OscConfig+0x296>
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	e015      	b.n	80007f6 <HAL_RCC_OscConfig+0x2c2>
 80007ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007ce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007d2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80007d6:	fa93 f3a3 	rbit	r3, r3
 80007da:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80007de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007e2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80007e6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80007ea:	fa93 f3a3 	rbit	r3, r3
 80007ee:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <HAL_RCC_OscConfig+0x2f8>)
 80007f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007fa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80007fe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000802:	fa92 f2a2 	rbit	r2, r2
 8000806:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800080a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800080e:	fab2 f282 	clz	r2, r2
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	f042 0220 	orr.w	r2, r2, #32
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	f002 021f 	and.w	r2, r2, #31
 800081e:	2101      	movs	r1, #1
 8000820:	fa01 f202 	lsl.w	r2, r1, r2
 8000824:	4013      	ands	r3, r2
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1ab      	bne.n	8000782 <HAL_RCC_OscConfig+0x24e>
 800082a:	e002      	b.n	8000832 <HAL_RCC_OscConfig+0x2fe>
 800082c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f003 0302 	and.w	r3, r3, #2
 800083c:	2b00      	cmp	r3, #0
 800083e:	f000 816f 	beq.w	8000b20 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000842:	4bd0      	ldr	r3, [pc, #832]	; (8000b84 <HAL_RCC_OscConfig+0x650>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f003 030c 	and.w	r3, r3, #12
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00b      	beq.n	8000866 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800084e:	4bcd      	ldr	r3, [pc, #820]	; (8000b84 <HAL_RCC_OscConfig+0x650>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f003 030c 	and.w	r3, r3, #12
 8000856:	2b08      	cmp	r3, #8
 8000858:	d16c      	bne.n	8000934 <HAL_RCC_OscConfig+0x400>
 800085a:	4bca      	ldr	r3, [pc, #808]	; (8000b84 <HAL_RCC_OscConfig+0x650>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000862:	2b00      	cmp	r3, #0
 8000864:	d166      	bne.n	8000934 <HAL_RCC_OscConfig+0x400>
 8000866:	2302      	movs	r3, #2
 8000868:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800086c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000870:	fa93 f3a3 	rbit	r3, r3
 8000874:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000878:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800087c:	fab3 f383 	clz	r3, r3
 8000880:	b2db      	uxtb	r3, r3
 8000882:	095b      	lsrs	r3, r3, #5
 8000884:	b2db      	uxtb	r3, r3
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b01      	cmp	r3, #1
 800088e:	d102      	bne.n	8000896 <HAL_RCC_OscConfig+0x362>
 8000890:	4bbc      	ldr	r3, [pc, #752]	; (8000b84 <HAL_RCC_OscConfig+0x650>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	e013      	b.n	80008be <HAL_RCC_OscConfig+0x38a>
 8000896:	2302      	movs	r3, #2
 8000898:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800089c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80008a0:	fa93 f3a3 	rbit	r3, r3
 80008a4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80008a8:	2302      	movs	r3, #2
 80008aa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80008ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80008b2:	fa93 f3a3 	rbit	r3, r3
 80008b6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80008ba:	4bb2      	ldr	r3, [pc, #712]	; (8000b84 <HAL_RCC_OscConfig+0x650>)
 80008bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008be:	2202      	movs	r2, #2
 80008c0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80008c4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80008c8:	fa92 f2a2 	rbit	r2, r2
 80008cc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80008d0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80008d4:	fab2 f282 	clz	r2, r2
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	f042 0220 	orr.w	r2, r2, #32
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	f002 021f 	and.w	r2, r2, #31
 80008e4:	2101      	movs	r1, #1
 80008e6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ea:	4013      	ands	r3, r2
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d007      	beq.n	8000900 <HAL_RCC_OscConfig+0x3cc>
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	691b      	ldr	r3, [r3, #16]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d002      	beq.n	8000900 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	f000 bd1b 	b.w	8001336 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000900:	4ba0      	ldr	r3, [pc, #640]	; (8000b84 <HAL_RCC_OscConfig+0x650>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	21f8      	movs	r1, #248	; 0xf8
 8000910:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000914:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000918:	fa91 f1a1 	rbit	r1, r1
 800091c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000920:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000924:	fab1 f181 	clz	r1, r1
 8000928:	b2c9      	uxtb	r1, r1
 800092a:	408b      	lsls	r3, r1
 800092c:	4995      	ldr	r1, [pc, #596]	; (8000b84 <HAL_RCC_OscConfig+0x650>)
 800092e:	4313      	orrs	r3, r2
 8000930:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000932:	e0f5      	b.n	8000b20 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	691b      	ldr	r3, [r3, #16]
 800093a:	2b00      	cmp	r3, #0
 800093c:	f000 8085 	beq.w	8000a4a <HAL_RCC_OscConfig+0x516>
 8000940:	2301      	movs	r3, #1
 8000942:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000946:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800094a:	fa93 f3a3 	rbit	r3, r3
 800094e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000952:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000956:	fab3 f383 	clz	r3, r3
 800095a:	b2db      	uxtb	r3, r3
 800095c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000960:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	461a      	mov	r2, r3
 8000968:	2301      	movs	r3, #1
 800096a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800096c:	f7ff fc86 	bl	800027c <HAL_GetTick>
 8000970:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000974:	e00a      	b.n	800098c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000976:	f7ff fc81 	bl	800027c <HAL_GetTick>
 800097a:	4602      	mov	r2, r0
 800097c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	2b02      	cmp	r3, #2
 8000984:	d902      	bls.n	800098c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8000986:	2303      	movs	r3, #3
 8000988:	f000 bcd5 	b.w	8001336 <HAL_RCC_OscConfig+0xe02>
 800098c:	2302      	movs	r3, #2
 800098e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000992:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000996:	fa93 f3a3 	rbit	r3, r3
 800099a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800099e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009a2:	fab3 f383 	clz	r3, r3
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	095b      	lsrs	r3, r3, #5
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d102      	bne.n	80009bc <HAL_RCC_OscConfig+0x488>
 80009b6:	4b73      	ldr	r3, [pc, #460]	; (8000b84 <HAL_RCC_OscConfig+0x650>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	e013      	b.n	80009e4 <HAL_RCC_OscConfig+0x4b0>
 80009bc:	2302      	movs	r3, #2
 80009be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80009c6:	fa93 f3a3 	rbit	r3, r3
 80009ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80009ce:	2302      	movs	r3, #2
 80009d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80009d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80009d8:	fa93 f3a3 	rbit	r3, r3
 80009dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80009e0:	4b68      	ldr	r3, [pc, #416]	; (8000b84 <HAL_RCC_OscConfig+0x650>)
 80009e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e4:	2202      	movs	r2, #2
 80009e6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80009ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80009ee:	fa92 f2a2 	rbit	r2, r2
 80009f2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80009f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80009fa:	fab2 f282 	clz	r2, r2
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	f042 0220 	orr.w	r2, r2, #32
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	f002 021f 	and.w	r2, r2, #31
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a10:	4013      	ands	r3, r2
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d0af      	beq.n	8000976 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a16:	4b5b      	ldr	r3, [pc, #364]	; (8000b84 <HAL_RCC_OscConfig+0x650>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	21f8      	movs	r1, #248	; 0xf8
 8000a26:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a2a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000a2e:	fa91 f1a1 	rbit	r1, r1
 8000a32:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8000a36:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000a3a:	fab1 f181 	clz	r1, r1
 8000a3e:	b2c9      	uxtb	r1, r1
 8000a40:	408b      	lsls	r3, r1
 8000a42:	4950      	ldr	r1, [pc, #320]	; (8000b84 <HAL_RCC_OscConfig+0x650>)
 8000a44:	4313      	orrs	r3, r2
 8000a46:	600b      	str	r3, [r1, #0]
 8000a48:	e06a      	b.n	8000b20 <HAL_RCC_OscConfig+0x5ec>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a50:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000a54:	fa93 f3a3 	rbit	r3, r3
 8000a58:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8000a5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a60:	fab3 f383 	clz	r3, r3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	461a      	mov	r2, r3
 8000a72:	2300      	movs	r3, #0
 8000a74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a76:	f7ff fc01 	bl	800027c <HAL_GetTick>
 8000a7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a7e:	e00a      	b.n	8000a96 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a80:	f7ff fbfc 	bl	800027c <HAL_GetTick>
 8000a84:	4602      	mov	r2, r0
 8000a86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d902      	bls.n	8000a96 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8000a90:	2303      	movs	r3, #3
 8000a92:	f000 bc50 	b.w	8001336 <HAL_RCC_OscConfig+0xe02>
 8000a96:	2302      	movs	r3, #2
 8000a98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000aa0:	fa93 f3a3 	rbit	r3, r3
 8000aa4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8000aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aac:	fab3 f383 	clz	r3, r3
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d102      	bne.n	8000ac6 <HAL_RCC_OscConfig+0x592>
 8000ac0:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <HAL_RCC_OscConfig+0x650>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	e013      	b.n	8000aee <HAL_RCC_OscConfig+0x5ba>
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000ad0:	fa93 f3a3 	rbit	r3, r3
 8000ad4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000ad8:	2302      	movs	r3, #2
 8000ada:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000ade:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ae2:	fa93 f3a3 	rbit	r3, r3
 8000ae6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <HAL_RCC_OscConfig+0x650>)
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aee:	2202      	movs	r2, #2
 8000af0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8000af4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000af8:	fa92 f2a2 	rbit	r2, r2
 8000afc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8000b00:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000b04:	fab2 f282 	clz	r2, r2
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	f042 0220 	orr.w	r2, r2, #32
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	f002 021f 	and.w	r2, r2, #31
 8000b14:	2101      	movs	r1, #1
 8000b16:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1af      	bne.n	8000a80 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f000 80da 	beq.w	8000ce4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d069      	beq.n	8000c0e <HAL_RCC_OscConfig+0x6da>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b44:	fa93 f3a3 	rbit	r3, r3
 8000b48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8000b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b50:	fab3 f383 	clz	r3, r3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_RCC_OscConfig+0x654>)
 8000b5a:	4413      	add	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	461a      	mov	r2, r3
 8000b60:	2301      	movs	r3, #1
 8000b62:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b64:	f7ff fb8a 	bl	800027c <HAL_GetTick>
 8000b68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b6c:	e00e      	b.n	8000b8c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b6e:	f7ff fb85 	bl	800027c <HAL_GetTick>
 8000b72:	4602      	mov	r2, r0
 8000b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d906      	bls.n	8000b8c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e3d9      	b.n	8001336 <HAL_RCC_OscConfig+0xe02>
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000
 8000b88:	10908120 	.word	0x10908120
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b96:	fa93 f3a3 	rbit	r3, r3
 8000b9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000b9e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	fa93 f2a3 	rbit	r2, r3
 8000bb0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000bba:	2202      	movs	r2, #2
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	fa93 f2a3 	rbit	r2, r3
 8000bc8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000bcc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bce:	4ba5      	ldr	r3, [pc, #660]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bd2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	6019      	str	r1, [r3, #0]
 8000bda:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	fa93 f1a3 	rbit	r1, r3
 8000be4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000be8:	6019      	str	r1, [r3, #0]
  return result;
 8000bea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	fab3 f383 	clz	r3, r3
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	f003 031f 	and.w	r3, r3, #31
 8000c00:	2101      	movs	r1, #1
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	4013      	ands	r3, r2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0b0      	beq.n	8000b6e <HAL_RCC_OscConfig+0x63a>
 8000c0c:	e06a      	b.n	8000ce4 <HAL_RCC_OscConfig+0x7b0>
 8000c0e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000c12:	2201      	movs	r2, #1
 8000c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c16:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	fa93 f2a3 	rbit	r2, r3
 8000c20:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c24:	601a      	str	r2, [r3, #0]
  return result;
 8000c26:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c2a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c2c:	fab3 f383 	clz	r3, r3
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b8c      	ldr	r3, [pc, #560]	; (8000e68 <HAL_RCC_OscConfig+0x934>)
 8000c36:	4413      	add	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c40:	f7ff fb1c 	bl	800027c <HAL_GetTick>
 8000c44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c48:	e009      	b.n	8000c5e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c4a:	f7ff fb17 	bl	800027c <HAL_GetTick>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e36b      	b.n	8001336 <HAL_RCC_OscConfig+0xe02>
 8000c5e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000c62:	2202      	movs	r2, #2
 8000c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c66:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	fa93 f2a3 	rbit	r2, r3
 8000c70:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	fa93 f2a3 	rbit	r2, r3
 8000c88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000c92:	2202      	movs	r2, #2
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	fa93 f2a3 	rbit	r2, r3
 8000ca0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ca4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ca6:	4b6f      	ldr	r3, [pc, #444]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000caa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000cae:	2102      	movs	r1, #2
 8000cb0:	6019      	str	r1, [r3, #0]
 8000cb2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	fa93 f1a3 	rbit	r1, r3
 8000cbc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cc0:	6019      	str	r1, [r3, #0]
  return result;
 8000cc2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	f003 031f 	and.w	r3, r3, #31
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	4013      	ands	r3, r2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1b2      	bne.n	8000c4a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 8158 	beq.w	8000fa4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cfa:	4b5a      	ldr	r3, [pc, #360]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d112      	bne.n	8000d2c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b57      	ldr	r3, [pc, #348]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4a56      	ldr	r2, [pc, #344]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	61d3      	str	r3, [r2, #28]
 8000d12:	4b54      	ldr	r3, [pc, #336]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000d26:	2301      	movs	r3, #1
 8000d28:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d2c:	4b4f      	ldr	r3, [pc, #316]	; (8000e6c <HAL_RCC_OscConfig+0x938>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d11a      	bne.n	8000d6e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d38:	4b4c      	ldr	r3, [pc, #304]	; (8000e6c <HAL_RCC_OscConfig+0x938>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a4b      	ldr	r2, [pc, #300]	; (8000e6c <HAL_RCC_OscConfig+0x938>)
 8000d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d42:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d44:	f7ff fa9a 	bl	800027c <HAL_GetTick>
 8000d48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d4c:	e009      	b.n	8000d62 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d4e:	f7ff fa95 	bl	800027c <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b64      	cmp	r3, #100	; 0x64
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e2e9      	b.n	8001336 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d62:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <HAL_RCC_OscConfig+0x938>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0ef      	beq.n	8000d4e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d106      	bne.n	8000d86 <HAL_RCC_OscConfig+0x852>
 8000d78:	4b3a      	ldr	r3, [pc, #232]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000d7a:	6a1b      	ldr	r3, [r3, #32]
 8000d7c:	4a39      	ldr	r2, [pc, #228]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6213      	str	r3, [r2, #32]
 8000d84:	e02f      	b.n	8000de6 <HAL_RCC_OscConfig+0x8b2>
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d10c      	bne.n	8000daa <HAL_RCC_OscConfig+0x876>
 8000d90:	4b34      	ldr	r3, [pc, #208]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000d92:	6a1b      	ldr	r3, [r3, #32]
 8000d94:	4a33      	ldr	r2, [pc, #204]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000d96:	f023 0301 	bic.w	r3, r3, #1
 8000d9a:	6213      	str	r3, [r2, #32]
 8000d9c:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000d9e:	6a1b      	ldr	r3, [r3, #32]
 8000da0:	4a30      	ldr	r2, [pc, #192]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000da2:	f023 0304 	bic.w	r3, r3, #4
 8000da6:	6213      	str	r3, [r2, #32]
 8000da8:	e01d      	b.n	8000de6 <HAL_RCC_OscConfig+0x8b2>
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	2b05      	cmp	r3, #5
 8000db2:	d10c      	bne.n	8000dce <HAL_RCC_OscConfig+0x89a>
 8000db4:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000db6:	6a1b      	ldr	r3, [r3, #32]
 8000db8:	4a2a      	ldr	r2, [pc, #168]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	6213      	str	r3, [r2, #32]
 8000dc0:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000dc2:	6a1b      	ldr	r3, [r3, #32]
 8000dc4:	4a27      	ldr	r2, [pc, #156]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6213      	str	r3, [r2, #32]
 8000dcc:	e00b      	b.n	8000de6 <HAL_RCC_OscConfig+0x8b2>
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	4a24      	ldr	r2, [pc, #144]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000dd4:	f023 0301 	bic.w	r3, r3, #1
 8000dd8:	6213      	str	r3, [r2, #32]
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000de0:	f023 0304 	bic.w	r3, r3, #4
 8000de4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d06b      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df0:	f7ff fa44 	bl	800027c <HAL_GetTick>
 8000df4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000df8:	e00b      	b.n	8000e12 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dfa:	f7ff fa3f 	bl	800027c <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e291      	b.n	8001336 <HAL_RCC_OscConfig+0xe02>
 8000e12:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000e16:	2202      	movs	r2, #2
 8000e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	fa93 f2a3 	rbit	r2, r3
 8000e24:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000e2e:	2202      	movs	r2, #2
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	fa93 f2a3 	rbit	r2, r3
 8000e3c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e40:	601a      	str	r2, [r3, #0]
  return result;
 8000e42:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e46:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e48:	fab3 f383 	clz	r3, r3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d109      	bne.n	8000e70 <HAL_RCC_OscConfig+0x93c>
 8000e5c:	4b01      	ldr	r3, [pc, #4]	; (8000e64 <HAL_RCC_OscConfig+0x930>)
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	e014      	b.n	8000e8c <HAL_RCC_OscConfig+0x958>
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000
 8000e68:	10908120 	.word	0x10908120
 8000e6c:	40007000 	.word	0x40007000
 8000e70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000e74:	2202      	movs	r2, #2
 8000e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e78:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	fa93 f2a3 	rbit	r2, r3
 8000e82:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	4bbb      	ldr	r3, [pc, #748]	; (8001178 <HAL_RCC_OscConfig+0xc44>)
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000e90:	2102      	movs	r1, #2
 8000e92:	6011      	str	r1, [r2, #0]
 8000e94:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	fa92 f1a2 	rbit	r1, r2
 8000e9e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000ea2:	6011      	str	r1, [r2, #0]
  return result;
 8000ea4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	fab2 f282 	clz	r2, r2
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	f002 021f 	and.w	r2, r2, #31
 8000eba:	2101      	movs	r1, #1
 8000ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d099      	beq.n	8000dfa <HAL_RCC_OscConfig+0x8c6>
 8000ec6:	e063      	b.n	8000f90 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec8:	f7ff f9d8 	bl	800027c <HAL_GetTick>
 8000ecc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed0:	e00b      	b.n	8000eea <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed2:	f7ff f9d3 	bl	800027c <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e225      	b.n	8001336 <HAL_RCC_OscConfig+0xe02>
 8000eea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000eee:	2202      	movs	r2, #2
 8000ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	fa93 f2a3 	rbit	r2, r3
 8000efc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f06:	2202      	movs	r2, #2
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	fa93 f2a3 	rbit	r2, r3
 8000f14:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f18:	601a      	str	r2, [r3, #0]
  return result;
 8000f1a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f1e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f20:	fab3 f383 	clz	r3, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	095b      	lsrs	r3, r3, #5
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d102      	bne.n	8000f3a <HAL_RCC_OscConfig+0xa06>
 8000f34:	4b90      	ldr	r3, [pc, #576]	; (8001178 <HAL_RCC_OscConfig+0xc44>)
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	e00d      	b.n	8000f56 <HAL_RCC_OscConfig+0xa22>
 8000f3a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f3e:	2202      	movs	r2, #2
 8000f40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f42:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	fa93 f2a3 	rbit	r2, r3
 8000f4c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	4b89      	ldr	r3, [pc, #548]	; (8001178 <HAL_RCC_OscConfig+0xc44>)
 8000f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f56:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	6011      	str	r1, [r2, #0]
 8000f5e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000f62:	6812      	ldr	r2, [r2, #0]
 8000f64:	fa92 f1a2 	rbit	r1, r2
 8000f68:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000f6c:	6011      	str	r1, [r2, #0]
  return result;
 8000f6e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000f72:	6812      	ldr	r2, [r2, #0]
 8000f74:	fab2 f282 	clz	r2, r2
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	f002 021f 	and.w	r2, r2, #31
 8000f84:	2101      	movs	r1, #1
 8000f86:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1a0      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f90:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d105      	bne.n	8000fa4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f98:	4b77      	ldr	r3, [pc, #476]	; (8001178 <HAL_RCC_OscConfig+0xc44>)
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	4a76      	ldr	r2, [pc, #472]	; (8001178 <HAL_RCC_OscConfig+0xc44>)
 8000f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 81c2 	beq.w	8001334 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fb0:	4b71      	ldr	r3, [pc, #452]	; (8001178 <HAL_RCC_OscConfig+0xc44>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	f000 819c 	beq.w	80012f6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	f040 8114 	bne.w	80011f2 <HAL_RCC_OscConfig+0xcbe>
 8000fca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000fce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	fa93 f2a3 	rbit	r2, r3
 8000fde:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fe2:	601a      	str	r2, [r3, #0]
  return result;
 8000fe4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fe8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fea:	fab3 f383 	clz	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ff4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff f93c 	bl	800027c <HAL_GetTick>
 8001004:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001008:	e009      	b.n	800101e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800100a:	f7ff f937 	bl	800027c <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e18b      	b.n	8001336 <HAL_RCC_OscConfig+0xe02>
 800101e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001022:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001028:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	fa93 f2a3 	rbit	r2, r3
 8001032:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001036:	601a      	str	r2, [r3, #0]
  return result;
 8001038:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800103c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103e:	fab3 f383 	clz	r3, r3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	095b      	lsrs	r3, r3, #5
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d102      	bne.n	8001058 <HAL_RCC_OscConfig+0xb24>
 8001052:	4b49      	ldr	r3, [pc, #292]	; (8001178 <HAL_RCC_OscConfig+0xc44>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	e01b      	b.n	8001090 <HAL_RCC_OscConfig+0xb5c>
 8001058:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800105c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001062:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	fa93 f2a3 	rbit	r2, r3
 800106c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001076:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	fa93 f2a3 	rbit	r2, r3
 8001086:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	4b3a      	ldr	r3, [pc, #232]	; (8001178 <HAL_RCC_OscConfig+0xc44>)
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001094:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001098:	6011      	str	r1, [r2, #0]
 800109a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800109e:	6812      	ldr	r2, [r2, #0]
 80010a0:	fa92 f1a2 	rbit	r1, r2
 80010a4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80010a8:	6011      	str	r1, [r2, #0]
  return result;
 80010aa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	fab2 f282 	clz	r2, r2
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	f042 0220 	orr.w	r2, r2, #32
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	f002 021f 	and.w	r2, r2, #31
 80010c0:	2101      	movs	r1, #1
 80010c2:	fa01 f202 	lsl.w	r2, r1, r2
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d19e      	bne.n	800100a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <HAL_RCC_OscConfig+0xc44>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	430b      	orrs	r3, r1
 80010e2:	4925      	ldr	r1, [pc, #148]	; (8001178 <HAL_RCC_OscConfig+0xc44>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	604b      	str	r3, [r1, #4]
 80010e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	fa93 f2a3 	rbit	r2, r3
 80010fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001100:	601a      	str	r2, [r3, #0]
  return result;
 8001102:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001106:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001112:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	461a      	mov	r2, r3
 800111a:	2301      	movs	r3, #1
 800111c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111e:	f7ff f8ad 	bl	800027c <HAL_GetTick>
 8001122:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001126:	e009      	b.n	800113c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001128:	f7ff f8a8 	bl	800027c <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e0fc      	b.n	8001336 <HAL_RCC_OscConfig+0xe02>
 800113c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001140:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001144:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	fa93 f2a3 	rbit	r2, r3
 8001150:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001154:	601a      	str	r2, [r3, #0]
  return result;
 8001156:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800115a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800115c:	fab3 f383 	clz	r3, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	095b      	lsrs	r3, r3, #5
 8001164:	b2db      	uxtb	r3, r3
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b01      	cmp	r3, #1
 800116e:	d105      	bne.n	800117c <HAL_RCC_OscConfig+0xc48>
 8001170:	4b01      	ldr	r3, [pc, #4]	; (8001178 <HAL_RCC_OscConfig+0xc44>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	e01e      	b.n	80011b4 <HAL_RCC_OscConfig+0xc80>
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000
 800117c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001180:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	fa93 f2a3 	rbit	r2, r3
 8001190:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800119a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	fa93 f2a3 	rbit	r2, r3
 80011aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	4b63      	ldr	r3, [pc, #396]	; (8001340 <HAL_RCC_OscConfig+0xe0c>)
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80011b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80011bc:	6011      	str	r1, [r2, #0]
 80011be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	fa92 f1a2 	rbit	r1, r2
 80011c8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011cc:	6011      	str	r1, [r2, #0]
  return result;
 80011ce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	fab2 f282 	clz	r2, r2
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	f042 0220 	orr.w	r2, r2, #32
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	f002 021f 	and.w	r2, r2, #31
 80011e4:	2101      	movs	r1, #1
 80011e6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d09b      	beq.n	8001128 <HAL_RCC_OscConfig+0xbf4>
 80011f0:	e0a0      	b.n	8001334 <HAL_RCC_OscConfig+0xe00>
 80011f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	fa93 f2a3 	rbit	r2, r3
 8001206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800120a:	601a      	str	r2, [r3, #0]
  return result;
 800120c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001210:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001212:	fab3 f383 	clz	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800121c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	461a      	mov	r2, r3
 8001224:	2300      	movs	r3, #0
 8001226:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff f828 	bl	800027c <HAL_GetTick>
 800122c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001230:	e009      	b.n	8001246 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001232:	f7ff f823 	bl	800027c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e077      	b.n	8001336 <HAL_RCC_OscConfig+0xe02>
 8001246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800124e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	fa93 f2a3 	rbit	r2, r3
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	601a      	str	r2, [r3, #0]
  return result;
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	095b      	lsrs	r3, r3, #5
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d102      	bne.n	8001280 <HAL_RCC_OscConfig+0xd4c>
 800127a:	4b31      	ldr	r3, [pc, #196]	; (8001340 <HAL_RCC_OscConfig+0xe0c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	e01b      	b.n	80012b8 <HAL_RCC_OscConfig+0xd84>
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f107 0320 	add.w	r3, r7, #32
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	fa93 f2a3 	rbit	r2, r3
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	f107 0318 	add.w	r3, r7, #24
 800129e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	f107 0318 	add.w	r3, r7, #24
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	fa93 f2a3 	rbit	r2, r3
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <HAL_RCC_OscConfig+0xe0c>)
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	f107 0210 	add.w	r2, r7, #16
 80012bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80012c0:	6011      	str	r1, [r2, #0]
 80012c2:	f107 0210 	add.w	r2, r7, #16
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	fa92 f1a2 	rbit	r1, r2
 80012cc:	f107 020c 	add.w	r2, r7, #12
 80012d0:	6011      	str	r1, [r2, #0]
  return result;
 80012d2:	f107 020c 	add.w	r2, r7, #12
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	fab2 f282 	clz	r2, r2
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	f042 0220 	orr.w	r2, r2, #32
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	f002 021f 	and.w	r2, r2, #31
 80012e8:	2101      	movs	r1, #1
 80012ea:	fa01 f202 	lsl.w	r2, r1, r2
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d19e      	bne.n	8001232 <HAL_RCC_OscConfig+0xcfe>
 80012f4:	e01e      	b.n	8001334 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e018      	b.n	8001336 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_RCC_OscConfig+0xe0c>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800130c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001310:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	429a      	cmp	r2, r3
 800131c:	d108      	bne.n	8001330 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800131e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001322:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800132c:	429a      	cmp	r2, r3
 800132e:	d001      	beq.n	8001334 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000

08001344 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b09e      	sub	sp, #120	; 0x78
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e162      	b.n	8001622 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800135c:	4b90      	ldr	r3, [pc, #576]	; (80015a0 <HAL_RCC_ClockConfig+0x25c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d910      	bls.n	800138c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136a:	4b8d      	ldr	r3, [pc, #564]	; (80015a0 <HAL_RCC_ClockConfig+0x25c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 0207 	bic.w	r2, r3, #7
 8001372:	498b      	ldr	r1, [pc, #556]	; (80015a0 <HAL_RCC_ClockConfig+0x25c>)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	4313      	orrs	r3, r2
 8001378:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800137a:	4b89      	ldr	r3, [pc, #548]	; (80015a0 <HAL_RCC_ClockConfig+0x25c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d001      	beq.n	800138c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e14a      	b.n	8001622 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001398:	4b82      	ldr	r3, [pc, #520]	; (80015a4 <HAL_RCC_ClockConfig+0x260>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	497f      	ldr	r1, [pc, #508]	; (80015a4 <HAL_RCC_ClockConfig+0x260>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 80dc 	beq.w	8001570 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d13c      	bne.n	800143a <HAL_RCC_ClockConfig+0xf6>
 80013c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013c8:	fa93 f3a3 	rbit	r3, r3
 80013cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80013ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d0:	fab3 f383 	clz	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d102      	bne.n	80013ea <HAL_RCC_ClockConfig+0xa6>
 80013e4:	4b6f      	ldr	r3, [pc, #444]	; (80015a4 <HAL_RCC_ClockConfig+0x260>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	e00f      	b.n	800140a <HAL_RCC_ClockConfig+0xc6>
 80013ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	667b      	str	r3, [r7, #100]	; 0x64
 80013f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013fc:	663b      	str	r3, [r7, #96]	; 0x60
 80013fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001400:	fa93 f3a3 	rbit	r3, r3
 8001404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001406:	4b67      	ldr	r3, [pc, #412]	; (80015a4 <HAL_RCC_ClockConfig+0x260>)
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800140e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001410:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001412:	fa92 f2a2 	rbit	r2, r2
 8001416:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001418:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800141a:	fab2 f282 	clz	r2, r2
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	f042 0220 	orr.w	r2, r2, #32
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	f002 021f 	and.w	r2, r2, #31
 800142a:	2101      	movs	r1, #1
 800142c:	fa01 f202 	lsl.w	r2, r1, r2
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d17b      	bne.n	800152e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e0f3      	b.n	8001622 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d13c      	bne.n	80014bc <HAL_RCC_ClockConfig+0x178>
 8001442:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001446:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001452:	fab3 f383 	clz	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	095b      	lsrs	r3, r3, #5
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b01      	cmp	r3, #1
 8001464:	d102      	bne.n	800146c <HAL_RCC_ClockConfig+0x128>
 8001466:	4b4f      	ldr	r3, [pc, #316]	; (80015a4 <HAL_RCC_ClockConfig+0x260>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	e00f      	b.n	800148c <HAL_RCC_ClockConfig+0x148>
 800146c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001470:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001474:	fa93 f3a3 	rbit	r3, r3
 8001478:	647b      	str	r3, [r7, #68]	; 0x44
 800147a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800147e:	643b      	str	r3, [r7, #64]	; 0x40
 8001480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001488:	4b46      	ldr	r3, [pc, #280]	; (80015a4 <HAL_RCC_ClockConfig+0x260>)
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001490:	63ba      	str	r2, [r7, #56]	; 0x38
 8001492:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001494:	fa92 f2a2 	rbit	r2, r2
 8001498:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800149a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800149c:	fab2 f282 	clz	r2, r2
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	f042 0220 	orr.w	r2, r2, #32
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	f002 021f 	and.w	r2, r2, #31
 80014ac:	2101      	movs	r1, #1
 80014ae:	fa01 f202 	lsl.w	r2, r1, r2
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d13a      	bne.n	800152e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0b2      	b.n	8001622 <HAL_RCC_ClockConfig+0x2de>
 80014bc:	2302      	movs	r3, #2
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c2:	fa93 f3a3 	rbit	r3, r3
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80014c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	095b      	lsrs	r3, r3, #5
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d102      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x1a0>
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <HAL_RCC_ClockConfig+0x260>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	e00d      	b.n	8001500 <HAL_RCC_ClockConfig+0x1bc>
 80014e4:	2302      	movs	r3, #2
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ea:	fa93 f3a3 	rbit	r3, r3
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
 80014f0:	2302      	movs	r3, #2
 80014f2:	623b      	str	r3, [r7, #32]
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <HAL_RCC_ClockConfig+0x260>)
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	2202      	movs	r2, #2
 8001502:	61ba      	str	r2, [r7, #24]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	fa92 f2a2 	rbit	r2, r2
 800150a:	617a      	str	r2, [r7, #20]
  return result;
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	fab2 f282 	clz	r2, r2
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	f042 0220 	orr.w	r2, r2, #32
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	f002 021f 	and.w	r2, r2, #31
 800151e:	2101      	movs	r1, #1
 8001520:	fa01 f202 	lsl.w	r2, r1, r2
 8001524:	4013      	ands	r3, r2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e079      	b.n	8001622 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_RCC_ClockConfig+0x260>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f023 0203 	bic.w	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	491a      	ldr	r1, [pc, #104]	; (80015a4 <HAL_RCC_ClockConfig+0x260>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001540:	f7fe fe9c 	bl	800027c <HAL_GetTick>
 8001544:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001546:	e00a      	b.n	800155e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001548:	f7fe fe98 	bl	800027c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f241 3288 	movw	r2, #5000	; 0x1388
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e061      	b.n	8001622 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_RCC_ClockConfig+0x260>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 020c 	and.w	r2, r3, #12
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	429a      	cmp	r2, r3
 800156e:	d1eb      	bne.n	8001548 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_RCC_ClockConfig+0x25c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d214      	bcs.n	80015a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_RCC_ClockConfig+0x25c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 0207 	bic.w	r2, r3, #7
 8001586:	4906      	ldr	r1, [pc, #24]	; (80015a0 <HAL_RCC_ClockConfig+0x25c>)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <HAL_RCC_ClockConfig+0x25c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d005      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e040      	b.n	8001622 <HAL_RCC_ClockConfig+0x2de>
 80015a0:	40022000 	.word	0x40022000
 80015a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_RCC_ClockConfig+0x2e8>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	491a      	ldr	r1, [pc, #104]	; (800162c <HAL_RCC_ClockConfig+0x2e8>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d009      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_RCC_ClockConfig+0x2e8>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4912      	ldr	r1, [pc, #72]	; (800162c <HAL_RCC_ClockConfig+0x2e8>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80015e6:	f000 f829 	bl	800163c <HAL_RCC_GetSysClockFreq>
 80015ea:	4601      	mov	r1, r0
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_RCC_ClockConfig+0x2e8>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015f4:	22f0      	movs	r2, #240	; 0xf0
 80015f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	fa92 f2a2 	rbit	r2, r2
 80015fe:	60fa      	str	r2, [r7, #12]
  return result;
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	fab2 f282 	clz	r2, r2
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	40d3      	lsrs	r3, r2
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_RCC_ClockConfig+0x2ec>)
 800160c:	5cd3      	ldrb	r3, [r2, r3]
 800160e:	fa21 f303 	lsr.w	r3, r1, r3
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <HAL_RCC_ClockConfig+0x2f0>)
 8001614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_RCC_ClockConfig+0x2f4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe fdea 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3778      	adds	r7, #120	; 0x78
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	08002e30 	.word	0x08002e30
 8001634:	20000008 	.word	0x20000008
 8001638:	20000000 	.word	0x20000000

0800163c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b08b      	sub	sp, #44	; 0x2c
 8001640:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001656:	4b29      	ldr	r3, [pc, #164]	; (80016fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b04      	cmp	r3, #4
 8001664:	d002      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x30>
 8001666:	2b08      	cmp	r3, #8
 8001668:	d003      	beq.n	8001672 <HAL_RCC_GetSysClockFreq+0x36>
 800166a:	e03c      	b.n	80016e6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <HAL_RCC_GetSysClockFreq+0xc4>)
 800166e:	623b      	str	r3, [r7, #32]
      break;
 8001670:	e03c      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001678:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800167c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	fa92 f2a2 	rbit	r2, r2
 8001684:	607a      	str	r2, [r7, #4]
  return result;
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	fab2 f282 	clz	r2, r2
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	40d3      	lsrs	r3, r2
 8001690:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	220f      	movs	r2, #15
 80016a0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	fa92 f2a2 	rbit	r2, r2
 80016a8:	60fa      	str	r2, [r7, #12]
  return result;
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	fab2 f282 	clz	r2, r2
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	40d3      	lsrs	r3, r2
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <HAL_RCC_GetSysClockFreq+0xcc>)
 80016b6:	5cd3      	ldrb	r3, [r2, r3]
 80016b8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_RCC_GetSysClockFreq+0xc4>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fb02 f303 	mul.w	r3, r2, r3
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
 80016d4:	e004      	b.n	80016e0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	4a0c      	ldr	r2, [pc, #48]	; (800170c <HAL_RCC_GetSysClockFreq+0xd0>)
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	623b      	str	r3, [r7, #32]
      break;
 80016e4:	e002      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_RCC_GetSysClockFreq+0xc4>)
 80016e8:	623b      	str	r3, [r7, #32]
      break;
 80016ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ec:	6a3b      	ldr	r3, [r7, #32]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	372c      	adds	r7, #44	; 0x2c
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	007a1200 	.word	0x007a1200
 8001704:	08002e10 	.word	0x08002e10
 8001708:	08002e20 	.word	0x08002e20
 800170c:	003d0900 	.word	0x003d0900

08001710 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b092      	sub	sp, #72	; 0x48
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80d7 	beq.w	80018dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001734:	4b4e      	ldr	r3, [pc, #312]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10e      	bne.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001740:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	4a4a      	ldr	r2, [pc, #296]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174a:	61d3      	str	r3, [r2, #28]
 800174c:	4b48      	ldr	r3, [pc, #288]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001758:	2301      	movs	r3, #1
 800175a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175e:	4b45      	ldr	r3, [pc, #276]	; (8001874 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d118      	bne.n	800179c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176a:	4b42      	ldr	r3, [pc, #264]	; (8001874 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a41      	ldr	r2, [pc, #260]	; (8001874 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001774:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001776:	f7fe fd81 	bl	800027c <HAL_GetTick>
 800177a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	e008      	b.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177e:	f7fe fd7d 	bl	800027c <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b64      	cmp	r3, #100	; 0x64
 800178a:	d901      	bls.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e169      	b.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	4b38      	ldr	r3, [pc, #224]	; (8001874 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800179c:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 8084 	beq.w	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d07c      	beq.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017bc:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80017d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80017d6:	fab3 f383 	clz	r3, r3
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	4b26      	ldr	r3, [pc, #152]	; (8001878 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	461a      	mov	r2, r3
 80017e6:	2301      	movs	r3, #1
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80017f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017fa:	fab3 f383 	clz	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001804:	4413      	add	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	461a      	mov	r2, r3
 800180a:	2300      	movs	r3, #0
 800180c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800180e:	4a18      	ldr	r2, [pc, #96]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001812:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d04b      	beq.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7fe fd2d 	bl	800027c <HAL_GetTick>
 8001822:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	e00a      	b.n	800183c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7fe fd29 	bl	800027c <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	; 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e113      	b.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800183c:	2302      	movs	r3, #2
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001842:	fa93 f3a3 	rbit	r3, r3
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
 8001848:	2302      	movs	r3, #2
 800184a:	623b      	str	r3, [r7, #32]
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	fa93 f3a3 	rbit	r3, r3
 8001852:	61fb      	str	r3, [r7, #28]
  return result;
 8001854:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	095b      	lsrs	r3, r3, #5
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d108      	bne.n	800187c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800186a:	4b01      	ldr	r3, [pc, #4]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	e00d      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001870:	40021000 	.word	0x40021000
 8001874:	40007000 	.word	0x40007000
 8001878:	10908100 	.word	0x10908100
 800187c:	2302      	movs	r3, #2
 800187e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	4b78      	ldr	r3, [pc, #480]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	2202      	movs	r2, #2
 800188e:	613a      	str	r2, [r7, #16]
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	fa92 f2a2 	rbit	r2, r2
 8001896:	60fa      	str	r2, [r7, #12]
  return result;
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	fab2 f282 	clz	r2, r2
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	f002 021f 	and.w	r2, r2, #31
 80018aa:	2101      	movs	r1, #1
 80018ac:	fa01 f202 	lsl.w	r2, r1, r2
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0b7      	beq.n	8001826 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80018b6:	4b6d      	ldr	r3, [pc, #436]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	496a      	ldr	r1, [pc, #424]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d105      	bne.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d0:	4b66      	ldr	r3, [pc, #408]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	4a65      	ldr	r2, [pc, #404]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80018d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80018e8:	4b60      	ldr	r3, [pc, #384]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	f023 0203 	bic.w	r2, r3, #3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	495d      	ldr	r1, [pc, #372]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001906:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	4956      	ldr	r1, [pc, #344]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001914:	4313      	orrs	r3, r2
 8001916:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001924:	4b51      	ldr	r3, [pc, #324]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	494e      	ldr	r1, [pc, #312]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001932:	4313      	orrs	r3, r2
 8001934:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0320 	and.w	r3, r3, #32
 800193e:	2b00      	cmp	r3, #0
 8001940:	d008      	beq.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001942:	4b4a      	ldr	r3, [pc, #296]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f023 0210 	bic.w	r2, r3, #16
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4947      	ldr	r1, [pc, #284]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001950:	4313      	orrs	r3, r2
 8001952:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001960:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196c:	493f      	ldr	r1, [pc, #252]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	2b00      	cmp	r3, #0
 800197c:	d008      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800197e:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f023 0220 	bic.w	r2, r3, #32
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4938      	ldr	r1, [pc, #224]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800198c:	4313      	orrs	r3, r2
 800198e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800199c:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	4930      	ldr	r1, [pc, #192]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d008      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80019ba:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	4929      	ldr	r1, [pc, #164]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	4921      	ldr	r1, [pc, #132]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d008      	beq.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	491a      	ldr	r1, [pc, #104]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	4912      	ldr	r1, [pc, #72]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d008      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	490b      	ldr	r1, [pc, #44]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5c:	4903      	ldr	r1, [pc, #12]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3748      	adds	r7, #72	; 0x48
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40021000 	.word	0x40021000

08001a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e01d      	b.n	8001abe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d106      	bne.n	8001a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f001 f84a 	bl	8002b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	4619      	mov	r1, r3
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f000 fa34 	bl	8001f1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_TIM_Base_Start_IT+0x50>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d00b      	beq.n	8001b0a <HAL_TIM_Base_Start_IT+0x42>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af8:	d007      	beq.n	8001b0a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0201 	orr.w	r2, r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	00010007 	.word	0x00010007

08001b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d122      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d11b      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0202 	mvn.w	r2, #2
 8001b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f9be 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001b64:	e005      	b.n	8001b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f9b0 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f9c1 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d122      	bne.n	8001bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d11b      	bne.n	8001bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0204 	mvn.w	r2, #4
 8001b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f994 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001bb8:	e005      	b.n	8001bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f986 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f997 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d122      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d11b      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0208 	mvn.w	r2, #8
 8001bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f96a 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f95c 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f96d 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d122      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b10      	cmp	r3, #16
 8001c3a:	d11b      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0210 	mvn.w	r2, #16
 8001c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2208      	movs	r2, #8
 8001c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f940 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001c60:	e005      	b.n	8001c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f932 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f943 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d10e      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d107      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0201 	mvn.w	r2, #1
 8001c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fe58 	bl	8002950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001caa:	2b80      	cmp	r3, #128	; 0x80
 8001cac:	d10e      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	2b80      	cmp	r3, #128	; 0x80
 8001cba:	d107      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 fadc 	bl	8002284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cda:	d10e      	bne.n	8001cfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce6:	2b80      	cmp	r3, #128	; 0x80
 8001ce8:	d107      	bne.n	8001cfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 facf 	bl	8002298 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d04:	2b40      	cmp	r3, #64	; 0x40
 8001d06:	d10e      	bne.n	8001d26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d12:	2b40      	cmp	r3, #64	; 0x40
 8001d14:	d107      	bne.n	8001d26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f8f1 	bl	8001f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	f003 0320 	and.w	r3, r3, #32
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d10e      	bne.n	8001d52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d107      	bne.n	8001d52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f06f 0220 	mvn.w	r2, #32
 8001d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fa8f 	bl	8002270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_TIM_ConfigClockSource+0x18>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e0a8      	b.n	8001ec4 <HAL_TIM_ConfigClockSource+0x16a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d94:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d9c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b40      	cmp	r3, #64	; 0x40
 8001dac:	d067      	beq.n	8001e7e <HAL_TIM_ConfigClockSource+0x124>
 8001dae:	2b40      	cmp	r3, #64	; 0x40
 8001db0:	d80b      	bhi.n	8001dca <HAL_TIM_ConfigClockSource+0x70>
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d073      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x144>
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d802      	bhi.n	8001dc0 <HAL_TIM_ConfigClockSource+0x66>
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d06f      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001dbe:	e078      	b.n	8001eb2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d06c      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x144>
 8001dc4:	2b30      	cmp	r3, #48	; 0x30
 8001dc6:	d06a      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8001dc8:	e073      	b.n	8001eb2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8001dca:	2b70      	cmp	r3, #112	; 0x70
 8001dcc:	d00d      	beq.n	8001dea <HAL_TIM_ConfigClockSource+0x90>
 8001dce:	2b70      	cmp	r3, #112	; 0x70
 8001dd0:	d804      	bhi.n	8001ddc <HAL_TIM_ConfigClockSource+0x82>
 8001dd2:	2b50      	cmp	r3, #80	; 0x50
 8001dd4:	d033      	beq.n	8001e3e <HAL_TIM_ConfigClockSource+0xe4>
 8001dd6:	2b60      	cmp	r3, #96	; 0x60
 8001dd8:	d041      	beq.n	8001e5e <HAL_TIM_ConfigClockSource+0x104>
      break;
 8001dda:	e06a      	b.n	8001eb2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8001ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001de0:	d066      	beq.n	8001eb0 <HAL_TIM_ConfigClockSource+0x156>
 8001de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de6:	d017      	beq.n	8001e18 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8001de8:	e063      	b.n	8001eb2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6899      	ldr	r1, [r3, #8]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f000 f999 	bl	8002130 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	609a      	str	r2, [r3, #8]
      break;
 8001e16:	e04c      	b.n	8001eb2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6899      	ldr	r1, [r3, #8]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f000 f982 	bl	8002130 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e3a:	609a      	str	r2, [r3, #8]
      break;
 8001e3c:	e039      	b.n	8001eb2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6859      	ldr	r1, [r3, #4]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f000 f8f6 	bl	800203c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2150      	movs	r1, #80	; 0x50
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f94f 	bl	80020fa <TIM_ITRx_SetConfig>
      break;
 8001e5c:	e029      	b.n	8001eb2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6859      	ldr	r1, [r3, #4]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f000 f915 	bl	800209a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2160      	movs	r1, #96	; 0x60
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f93f 	bl	80020fa <TIM_ITRx_SetConfig>
      break;
 8001e7c:	e019      	b.n	8001eb2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f000 f8d6 	bl	800203c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2140      	movs	r1, #64	; 0x40
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 f92f 	bl	80020fa <TIM_ITRx_SetConfig>
      break;
 8001e9c:	e009      	b.n	8001eb2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f000 f926 	bl	80020fa <TIM_ITRx_SetConfig>
      break;
 8001eae:	e000      	b.n	8001eb2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8001eb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3c      	ldr	r2, [pc, #240]	; (8002020 <TIM_Base_SetConfig+0x104>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00f      	beq.n	8001f54 <TIM_Base_SetConfig+0x38>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3a:	d00b      	beq.n	8001f54 <TIM_Base_SetConfig+0x38>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a39      	ldr	r2, [pc, #228]	; (8002024 <TIM_Base_SetConfig+0x108>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d007      	beq.n	8001f54 <TIM_Base_SetConfig+0x38>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a38      	ldr	r2, [pc, #224]	; (8002028 <TIM_Base_SetConfig+0x10c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d003      	beq.n	8001f54 <TIM_Base_SetConfig+0x38>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a37      	ldr	r2, [pc, #220]	; (800202c <TIM_Base_SetConfig+0x110>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d108      	bne.n	8001f66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a2d      	ldr	r2, [pc, #180]	; (8002020 <TIM_Base_SetConfig+0x104>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01b      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f74:	d017      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a2a      	ldr	r2, [pc, #168]	; (8002024 <TIM_Base_SetConfig+0x108>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a29      	ldr	r2, [pc, #164]	; (8002028 <TIM_Base_SetConfig+0x10c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00f      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a28      	ldr	r2, [pc, #160]	; (800202c <TIM_Base_SetConfig+0x110>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00b      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a27      	ldr	r2, [pc, #156]	; (8002030 <TIM_Base_SetConfig+0x114>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a26      	ldr	r2, [pc, #152]	; (8002034 <TIM_Base_SetConfig+0x118>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d003      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a25      	ldr	r2, [pc, #148]	; (8002038 <TIM_Base_SetConfig+0x11c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d108      	bne.n	8001fb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a10      	ldr	r2, [pc, #64]	; (8002020 <TIM_Base_SetConfig+0x104>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00f      	beq.n	8002004 <TIM_Base_SetConfig+0xe8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a11      	ldr	r2, [pc, #68]	; (800202c <TIM_Base_SetConfig+0x110>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00b      	beq.n	8002004 <TIM_Base_SetConfig+0xe8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a10      	ldr	r2, [pc, #64]	; (8002030 <TIM_Base_SetConfig+0x114>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d007      	beq.n	8002004 <TIM_Base_SetConfig+0xe8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <TIM_Base_SetConfig+0x118>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d003      	beq.n	8002004 <TIM_Base_SetConfig+0xe8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <TIM_Base_SetConfig+0x11c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d103      	bne.n	800200c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	615a      	str	r2, [r3, #20]
}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40012c00 	.word	0x40012c00
 8002024:	40000400 	.word	0x40000400
 8002028:	40000800 	.word	0x40000800
 800202c:	40013400 	.word	0x40013400
 8002030:	40014000 	.word	0x40014000
 8002034:	40014400 	.word	0x40014400
 8002038:	40014800 	.word	0x40014800

0800203c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	f023 0201 	bic.w	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f023 030a 	bic.w	r3, r3, #10
 8002078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4313      	orrs	r3, r2
 8002080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	621a      	str	r2, [r3, #32]
}
 800208e:	bf00      	nop
 8002090:	371c      	adds	r7, #28
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800209a:	b480      	push	{r7}
 800209c:	b087      	sub	sp, #28
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	f023 0210 	bic.w	r2, r3, #16
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	031b      	lsls	r3, r3, #12
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	621a      	str	r2, [r3, #32]
}
 80020ee:	bf00      	nop
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b085      	sub	sp, #20
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002110:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	f043 0307 	orr.w	r3, r3, #7
 800211c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	609a      	str	r2, [r3, #8]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800214a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	021a      	lsls	r2, r3, #8
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	431a      	orrs	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4313      	orrs	r3, r2
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	609a      	str	r2, [r3, #8]
}
 8002164:	bf00      	nop
 8002166:	371c      	adds	r7, #28
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002184:	2302      	movs	r3, #2
 8002186:	e063      	b.n	8002250 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2b      	ldr	r2, [pc, #172]	; (800225c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d004      	beq.n	80021bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a2a      	ldr	r2, [pc, #168]	; (8002260 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d108      	bne.n	80021ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80021c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1b      	ldr	r2, [pc, #108]	; (800225c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d018      	beq.n	8002224 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fa:	d013      	beq.n	8002224 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a18      	ldr	r2, [pc, #96]	; (8002264 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00e      	beq.n	8002224 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a17      	ldr	r2, [pc, #92]	; (8002268 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d009      	beq.n	8002224 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a12      	ldr	r2, [pc, #72]	; (8002260 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d004      	beq.n	8002224 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d10c      	bne.n	800223e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800222a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	4313      	orrs	r3, r2
 8002234:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40012c00 	.word	0x40012c00
 8002260:	40013400 	.word	0x40013400
 8002264:	40000400 	.word	0x40000400
 8002268:	40000800 	.word	0x40000800
 800226c:	40014000 	.word	0x40014000

08002270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d113      	bne.n	8002304 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00e      	beq.n	8002304 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d009      	beq.n	8002304 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 8114 	beq.w	8002522 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4798      	blx	r3
      }
      return;
 8002302:	e10e      	b.n	8002522 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 80d6 	beq.w	80024b8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80cb 	beq.w	80024b8 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00e      	beq.n	800234a <HAL_UART_IRQHandler+0x9e>
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2201      	movs	r2, #1
 800233c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00e      	beq.n	8002372 <HAL_UART_IRQHandler+0xc6>
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2202      	movs	r2, #2
 8002364:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800236a:	f043 0204 	orr.w	r2, r3, #4
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00e      	beq.n	800239a <HAL_UART_IRQHandler+0xee>
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2204      	movs	r2, #4
 800238c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002392:	f043 0202 	orr.w	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2208      	movs	r2, #8
 80023be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c4:	f043 0208 	orr.w	r2, r3, #8
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00f      	beq.n	80023f6 <HAL_UART_IRQHandler+0x14a>
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ee:	f043 0220 	orr.w	r2, r3, #32
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8093 	beq.w	8002526 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00c      	beq.n	8002424 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002428:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002434:	2b40      	cmp	r3, #64	; 0x40
 8002436:	d004      	beq.n	8002442 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800243e:	2b00      	cmp	r3, #0
 8002440:	d031      	beq.n	80024a6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f88c 	bl	8002560 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	2b40      	cmp	r3, #64	; 0x40
 8002454:	d123      	bne.n	800249e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002464:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d013      	beq.n	8002496 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002472:	4a30      	ldr	r2, [pc, #192]	; (8002534 <HAL_UART_IRQHandler+0x288>)
 8002474:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe f81b 	bl	80004b6 <HAL_DMA_Abort_IT>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d016      	beq.n	80024b4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800248a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002490:	4610      	mov	r0, r2
 8002492:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002494:	e00e      	b.n	80024b4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f858 	bl	800254c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800249c:	e00a      	b.n	80024b4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f854 	bl	800254c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a4:	e006      	b.n	80024b4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f850 	bl	800254c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80024b2:	e038      	b.n	8002526 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b4:	bf00      	nop
    return;
 80024b6:	e036      	b.n	8002526 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00d      	beq.n	80024de <HAL_UART_IRQHandler+0x232>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f891 	bl	80025fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80024dc:	e026      	b.n	800252c <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00d      	beq.n	8002504 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d017      	beq.n	800252a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
    }
    return;
 8002502:	e012      	b.n	800252a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00e      	beq.n	800252c <HAL_UART_IRQHandler+0x280>
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f857 	bl	80025cc <UART_EndTransmit_IT>
    return;
 800251e:	bf00      	nop
 8002520:	e004      	b.n	800252c <HAL_UART_IRQHandler+0x280>
      return;
 8002522:	bf00      	nop
 8002524:	e002      	b.n	800252c <HAL_UART_IRQHandler+0x280>
    return;
 8002526:	bf00      	nop
 8002528:	e000      	b.n	800252c <HAL_UART_IRQHandler+0x280>
    return;
 800252a:	bf00      	nop
  }

}
 800252c:	3720      	adds	r7, #32
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	080025a1 	.word	0x080025a1

08002538 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002576:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f7ff ffc4 	bl	800254c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff ffa1 	bl	8002538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <__NVIC_EnableIRQ>:
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	2b00      	cmp	r3, #0
 8002624:	db0b      	blt.n	800263e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	f003 021f 	and.w	r2, r3, #31
 800262c:	4907      	ldr	r1, [pc, #28]	; (800264c <__NVIC_EnableIRQ+0x38>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	2001      	movs	r0, #1
 8002636:	fa00 f202 	lsl.w	r2, r0, r2
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000e100 	.word	0xe000e100

08002650 <USART_GPIO_Init>:

#include "USART_GPIO_DMA.h"
#include "main.h"

void USART_GPIO_Init(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOEEN | RCC_AHBENR_DMA1EN | RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIODEN;
 8002654:	4b3a      	ldr	r3, [pc, #232]	; (8002740 <USART_GPIO_Init+0xf0>)
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	4a39      	ldr	r2, [pc, #228]	; (8002740 <USART_GPIO_Init+0xf0>)
 800265a:	f443 1358 	orr.w	r3, r3, #3538944	; 0x360000
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN | RCC_APB1ENR_USART2EN | RCC_APB1ENR_WWDGEN | RCC_APB1ENR_USART3EN;
 8002664:	4b36      	ldr	r3, [pc, #216]	; (8002740 <USART_GPIO_Init+0xf0>)
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	4a35      	ldr	r2, [pc, #212]	; (8002740 <USART_GPIO_Init+0xf0>)
 800266a:	f443 23c1 	orr.w	r3, r3, #395264	; 0x60800
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	61d3      	str	r3, [r2, #28]

	GPIOA->MODER |= 0x80;
 8002674:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800267e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002682:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 0x7000;
 8002684:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800268e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002692:	6213      	str	r3, [r2, #32]

	GPIOB->MODER |= 0x200000;
 8002694:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <USART_GPIO_Init+0xf4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a2a      	ldr	r2, [pc, #168]	; (8002744 <USART_GPIO_Init+0xf4>)
 800269a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800269e:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= 0x700;
 80026a0:	4b28      	ldr	r3, [pc, #160]	; (8002744 <USART_GPIO_Init+0xf4>)
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	4a27      	ldr	r2, [pc, #156]	; (8002744 <USART_GPIO_Init+0xf4>)
 80026a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026aa:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOE->MODER |= 0x55555555;
 80026ac:	4b26      	ldr	r3, [pc, #152]	; (8002748 <USART_GPIO_Init+0xf8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a25      	ldr	r2, [pc, #148]	; (8002748 <USART_GPIO_Init+0xf8>)
 80026b2:	f043 3355 	orr.w	r3, r3, #1431655765	; 0x55555555
 80026b6:	6013      	str	r3, [r2, #0]
	GPIOE->OTYPER &= 0xFFFF0000;
 80026b8:	4b23      	ldr	r3, [pc, #140]	; (8002748 <USART_GPIO_Init+0xf8>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a22      	ldr	r2, [pc, #136]	; (8002748 <USART_GPIO_Init+0xf8>)
 80026be:	0c1b      	lsrs	r3, r3, #16
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	6053      	str	r3, [r2, #4]
	GPIOE->PUPDR = 0x0;
 80026c4:	4b20      	ldr	r3, [pc, #128]	; (8002748 <USART_GPIO_Init+0xf8>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]
	GPIOE->OSPEEDR |= 0x55555555;
 80026ca:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <USART_GPIO_Init+0xf8>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <USART_GPIO_Init+0xf8>)
 80026d0:	f043 3355 	orr.w	r3, r3, #1431655765	; 0x55555555
 80026d4:	6093      	str	r3, [r2, #8]

	USART2->CR1 |= USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE | USART_CR1_TXEIE | USART_CR1_TE;
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <USART_GPIO_Init+0xfc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1c      	ldr	r2, [pc, #112]	; (800274c <USART_GPIO_Init+0xfc>)
 80026dc:	f043 03ad 	orr.w	r3, r3, #173	; 0xad
 80026e0:	6013      	str	r3, [r2, #0]
	USART2->CR3 |= USART_CR3_DMAR;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <USART_GPIO_Init+0xfc>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	4a19      	ldr	r2, [pc, #100]	; (800274c <USART_GPIO_Init+0xfc>)
 80026e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ec:	6093      	str	r3, [r2, #8]
	USART2->BRR = 0xD05;
 80026ee:	4b17      	ldr	r3, [pc, #92]	; (800274c <USART_GPIO_Init+0xfc>)
 80026f0:	f640 5205 	movw	r2, #3333	; 0xd05
 80026f4:	60da      	str	r2, [r3, #12]

	USART3->CR1 |= USART_CR1_RE | USART_CR1_UE | USART_CR1_TXEIE | USART_CR1_TE;
 80026f6:	4b16      	ldr	r3, [pc, #88]	; (8002750 <USART_GPIO_Init+0x100>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a15      	ldr	r2, [pc, #84]	; (8002750 <USART_GPIO_Init+0x100>)
 80026fc:	f043 038d 	orr.w	r3, r3, #141	; 0x8d
 8002700:	6013      	str	r3, [r2, #0]
	USART3->BRR = 0xD05;
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <USART_GPIO_Init+0x100>)
 8002704:	f640 5205 	movw	r2, #3333	; 0xd05
 8002708:	60da      	str	r2, [r3, #12]

	//NVIC_EnableIRQ(USART2_IRQn);

	GPIOD->MODER |= 0x55555555; //LED pins
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <USART_GPIO_Init+0x104>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a11      	ldr	r2, [pc, #68]	; (8002754 <USART_GPIO_Init+0x104>)
 8002710:	f043 3355 	orr.w	r3, r3, #1431655765	; 0x55555555
 8002714:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER &= 0xFFFF0000;
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <USART_GPIO_Init+0x104>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <USART_GPIO_Init+0x104>)
 800271c:	0c1b      	lsrs	r3, r3, #16
 800271e:	041b      	lsls	r3, r3, #16
 8002720:	6053      	str	r3, [r2, #4]
	GPIOD->PUPDR = 0x0;
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <USART_GPIO_Init+0x104>)
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
	GPIOD->OSPEEDR |= 0x55555555;
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <USART_GPIO_Init+0x104>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4a09      	ldr	r2, [pc, #36]	; (8002754 <USART_GPIO_Init+0x104>)
 800272e:	f043 3355 	orr.w	r3, r3, #1431655765	; 0x55555555
 8002732:	6093      	str	r3, [r2, #8]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000
 8002744:	48000400 	.word	0x48000400
 8002748:	48001000 	.word	0x48001000
 800274c:	40004400 	.word	0x40004400
 8002750:	40004800 	.word	0x40004800
 8002754:	48000c00 	.word	0x48000c00

08002758 <USART_DMA_Init>:

void USART_DMA_Init(uint8_t* buff_address)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	DMA1_Channel6->CNDTR = 32;
 8002760:	4b0e      	ldr	r3, [pc, #56]	; (800279c <USART_DMA_Init+0x44>)
 8002762:	2220      	movs	r2, #32
 8002764:	605a      	str	r2, [r3, #4]
	DMA1_Channel6->CPAR = &(USART2->RDR);
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <USART_DMA_Init+0x44>)
 8002768:	4a0d      	ldr	r2, [pc, #52]	; (80027a0 <USART_DMA_Init+0x48>)
 800276a:	609a      	str	r2, [r3, #8]
	DMA1_Channel6->CMAR = buff_address;
 800276c:	4a0b      	ldr	r2, [pc, #44]	; (800279c <USART_DMA_Init+0x44>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	60d3      	str	r3, [r2, #12]
	DMA1_Channel6->CCR |= DMA_CCR_MINC | DMA_CCR_CIRC | DMA_CCR_PL_1 | DMA_CCR_TCIE;
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <USART_DMA_Init+0x44>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <USART_DMA_Init+0x44>)
 8002778:	f443 5302 	orr.w	r3, r3, #8320	; 0x2080
 800277c:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 8002780:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CCR |= DMA_CCR_EN;
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <USART_DMA_Init+0x44>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <USART_DMA_Init+0x44>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800278e:	2010      	movs	r0, #16
 8002790:	f7ff ff40 	bl	8002614 <__NVIC_EnableIRQ>
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	4002006c 	.word	0x4002006c
 80027a0:	40004424 	.word	0x40004424

080027a4 <TX_USART3>:

void TX_USART3(uint8_t* buff, uint8_t* frameFlag)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
	static uint8_t idx = 0;
	if((USART3->ISR & USART_ISR_TXE) && *frameFlag)
 80027ae:	4b14      	ldr	r3, [pc, #80]	; (8002800 <TX_USART3+0x5c>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d01c      	beq.n	80027f4 <TX_USART3+0x50>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d018      	beq.n	80027f4 <TX_USART3+0x50>
	{
		USART3->TDR = buff[idx];
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <TX_USART3+0x60>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4413      	add	r3, r2
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <TX_USART3+0x5c>)
 80027d0:	b292      	uxth	r2, r2
 80027d2:	851a      	strh	r2, [r3, #40]	; 0x28
		idx++;
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <TX_USART3+0x60>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <TX_USART3+0x60>)
 80027de:	701a      	strb	r2, [r3, #0]
		if(idx > 31)
 80027e0:	4b08      	ldr	r3, [pc, #32]	; (8002804 <TX_USART3+0x60>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b1f      	cmp	r3, #31
 80027e6:	d905      	bls.n	80027f4 <TX_USART3+0x50>
		{
			idx = 0;
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <TX_USART3+0x60>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
			*frameFlag = 0;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40004800 	.word	0x40004800
 8002804:	20000028 	.word	0x20000028

08002808 <main>:
uint8_t frameOK = 0;
int b[1000];


int main(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800280e:	f7fd fcdb 	bl	80001c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002812:	f000 f8bd 	bl	8002990 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	USART_GPIO_Init();
 8002816:	f7ff ff1b 	bl	8002650 <USART_GPIO_Init>
	USART_DMA_Init(buffer);
 800281a:	4810      	ldr	r0, [pc, #64]	; (800285c <main+0x54>)
 800281c:	f7ff ff9c 	bl	8002758 <USART_DMA_Init>
	MX_TIM2_Init();
 8002820:	f000 f90c 	bl	8002a3c <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8002824:	480e      	ldr	r0, [pc, #56]	; (8002860 <main+0x58>)
 8002826:	f7ff f94f 	bl	8001ac8 <HAL_TIM_Base_Start_IT>

	for(char i = 0; i < 32; ++i)
 800282a:	2300      	movs	r3, #0
 800282c:	71fb      	strb	r3, [r7, #7]
 800282e:	e006      	b.n	800283e <main+0x36>
	{
		buffer[i] = 0;
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	4a0a      	ldr	r2, [pc, #40]	; (800285c <main+0x54>)
 8002834:	2100      	movs	r1, #0
 8002836:	54d1      	strb	r1, [r2, r3]
	for(char i = 0; i < 32; ++i)
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	3301      	adds	r3, #1
 800283c:	71fb      	strb	r3, [r7, #7]
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	2b1f      	cmp	r3, #31
 8002842:	d9f5      	bls.n	8002830 <main+0x28>
	}

	while(1)
	{
		LED_Switch(&state, &val, PM2_5);
 8002844:	4b07      	ldr	r3, [pc, #28]	; (8002864 <main+0x5c>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	4907      	ldr	r1, [pc, #28]	; (8002868 <main+0x60>)
 800284c:	4807      	ldr	r0, [pc, #28]	; (800286c <main+0x64>)
 800284e:	f000 fa16 	bl	8002c7e <LED_Switch>
		TX_USART3(buffer, &frameOK);
 8002852:	4907      	ldr	r1, [pc, #28]	; (8002870 <main+0x68>)
 8002854:	4801      	ldr	r0, [pc, #4]	; (800285c <main+0x54>)
 8002856:	f7ff ffa5 	bl	80027a4 <TX_USART3>
		LED_Switch(&state, &val, PM2_5);
 800285a:	e7f3      	b.n	8002844 <main+0x3c>
 800285c:	20000fdc 	.word	0x20000fdc
 8002860:	20000ffc 	.word	0x20000ffc
 8002864:	20000032 	.word	0x20000032
 8002868:	2000002c 	.word	0x2000002c
 800286c:	20000029 	.word	0x20000029
 8002870:	20000036 	.word	0x20000036

08002874 <DMA1_Channel6_IRQHandler>:
	/* USER CODE END 3 */
}


void DMA1_Channel6_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
	DMA1_Channel6->CCR &= ~DMA_CCR_EN;
 8002878:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <DMA1_Channel6_IRQHandler+0xbc>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <DMA1_Channel6_IRQHandler+0xbc>)
 800287e:	f023 0301 	bic.w	r3, r3, #1
 8002882:	6013      	str	r3, [r2, #0]
	if (DMA1->ISR & DMA_ISR_TCIF6)
 8002884:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <DMA1_Channel6_IRQHandler+0xc0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d047      	beq.n	8002920 <DMA1_Channel6_IRQHandler+0xac>
	{
		if(buffer[0] == 0x42 && buffer[1] == 0x4D && checksum(buffer)) //if proper frame header
 8002890:	4b29      	ldr	r3, [pc, #164]	; (8002938 <DMA1_Channel6_IRQHandler+0xc4>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b42      	cmp	r3, #66	; 0x42
 8002896:	d137      	bne.n	8002908 <DMA1_Channel6_IRQHandler+0x94>
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <DMA1_Channel6_IRQHandler+0xc4>)
 800289a:	785b      	ldrb	r3, [r3, #1]
 800289c:	2b4d      	cmp	r3, #77	; 0x4d
 800289e:	d133      	bne.n	8002908 <DMA1_Channel6_IRQHandler+0x94>
 80028a0:	4825      	ldr	r0, [pc, #148]	; (8002938 <DMA1_Channel6_IRQHandler+0xc4>)
 80028a2:	f000 f9c1 	bl	8002c28 <checksum>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d02d      	beq.n	8002908 <DMA1_Channel6_IRQHandler+0x94>
		{
			//USART2->ICR |= USART_ICR_TCCF;
			PM1_0 = (buffer[4] << 8) | buffer[5];
 80028ac:	4b22      	ldr	r3, [pc, #136]	; (8002938 <DMA1_Channel6_IRQHandler+0xc4>)
 80028ae:	791b      	ldrb	r3, [r3, #4]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	b21a      	sxth	r2, r3
 80028b4:	4b20      	ldr	r3, [pc, #128]	; (8002938 <DMA1_Channel6_IRQHandler+0xc4>)
 80028b6:	795b      	ldrb	r3, [r3, #5]
 80028b8:	b21b      	sxth	r3, r3
 80028ba:	4313      	orrs	r3, r2
 80028bc:	b21b      	sxth	r3, r3
 80028be:	b29a      	uxth	r2, r3
 80028c0:	4b1e      	ldr	r3, [pc, #120]	; (800293c <DMA1_Channel6_IRQHandler+0xc8>)
 80028c2:	801a      	strh	r2, [r3, #0]
			PM2_5 = (buffer[6] << 8) | buffer[7];
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <DMA1_Channel6_IRQHandler+0xc4>)
 80028c6:	799b      	ldrb	r3, [r3, #6]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	b21a      	sxth	r2, r3
 80028cc:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <DMA1_Channel6_IRQHandler+0xc4>)
 80028ce:	79db      	ldrb	r3, [r3, #7]
 80028d0:	b21b      	sxth	r3, r3
 80028d2:	4313      	orrs	r3, r2
 80028d4:	b21b      	sxth	r3, r3
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <DMA1_Channel6_IRQHandler+0xcc>)
 80028da:	801a      	strh	r2, [r3, #0]
			PM10 = (buffer[8] << 8) | buffer[9];
 80028dc:	4b16      	ldr	r3, [pc, #88]	; (8002938 <DMA1_Channel6_IRQHandler+0xc4>)
 80028de:	7a1b      	ldrb	r3, [r3, #8]
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	b21a      	sxth	r2, r3
 80028e4:	4b14      	ldr	r3, [pc, #80]	; (8002938 <DMA1_Channel6_IRQHandler+0xc4>)
 80028e6:	7a5b      	ldrb	r3, [r3, #9]
 80028e8:	b21b      	sxth	r3, r3
 80028ea:	4313      	orrs	r3, r2
 80028ec:	b21b      	sxth	r3, r3
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <DMA1_Channel6_IRQHandler+0xd0>)
 80028f2:	801a      	strh	r2, [r3, #0]
			frameOK = TRUE;
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <DMA1_Channel6_IRQHandler+0xd4>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
			DMA1->IFCR |= DMA_IFCR_CTCIF6;
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <DMA1_Channel6_IRQHandler+0xc0>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4a0d      	ldr	r2, [pc, #52]	; (8002934 <DMA1_Channel6_IRQHandler+0xc0>)
 8002900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002904:	6053      	str	r3, [r2, #4]
 8002906:	e00b      	b.n	8002920 <DMA1_Channel6_IRQHandler+0xac>
		{
//			DMA1_Channel6->CCR &= ~DMA_CCR_EN;
//			DMA1_Channel6->CNDTR = 32;
//			DMA1_Channel6->CCR |= DMA_CCR_EN;
//			DMA1->IFCR |= DMA_IFCR_CTCIF6;
			WWDG->CR |= WWDG_CR_WDGA; // software reset ...
 8002908:	4b10      	ldr	r3, [pc, #64]	; (800294c <DMA1_Channel6_IRQHandler+0xd8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0f      	ldr	r2, [pc, #60]	; (800294c <DMA1_Channel6_IRQHandler+0xd8>)
 800290e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002912:	6013      	str	r3, [r2, #0]
			WWDG->CR &= 0xFFFFFF80;   // ...in case of an transmission error
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <DMA1_Channel6_IRQHandler+0xd8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0c      	ldr	r2, [pc, #48]	; (800294c <DMA1_Channel6_IRQHandler+0xd8>)
 800291a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800291e:	6013      	str	r3, [r2, #0]
		}
	}
	DMA1_Channel6->CCR |= DMA_CCR_EN;
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <DMA1_Channel6_IRQHandler+0xbc>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a02      	ldr	r2, [pc, #8]	; (8002930 <DMA1_Channel6_IRQHandler+0xbc>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6013      	str	r3, [r2, #0]
}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}
 8002930:	4002006c 	.word	0x4002006c
 8002934:	40020000 	.word	0x40020000
 8002938:	20000fdc 	.word	0x20000fdc
 800293c:	20000030 	.word	0x20000030
 8002940:	20000032 	.word	0x20000032
 8002944:	20000034 	.word	0x20000034
 8002948:	20000036 	.word	0x20000036
 800294c:	40002c00 	.word	0x40002c00

08002950 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	state = 0;
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
	GPIOE->BRR |= 0x0000FF00;
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	4a09      	ldr	r2, [pc, #36]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002964:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8002968:	6293      	str	r3, [r2, #40]	; 0x28
	GPIOE->BSRR |= val;
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	4905      	ldr	r1, [pc, #20]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002974:	4313      	orrs	r3, r2
 8002976:	618b      	str	r3, [r1, #24]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	20000029 	.word	0x20000029
 8002988:	48001000 	.word	0x48001000
 800298c:	2000002c 	.word	0x2000002c

08002990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b09e      	sub	sp, #120	; 0x78
 8002994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002996:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800299a:	2228      	movs	r2, #40	; 0x28
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fa22 	bl	8002de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029b4:	463b      	mov	r3, r7
 80029b6:	223c      	movs	r2, #60	; 0x3c
 80029b8:	2100      	movs	r1, #0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fa14 	bl	8002de8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029c0:	2302      	movs	r3, #2
 80029c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029c4:	2301      	movs	r3, #1
 80029c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029c8:	2310      	movs	r3, #16
 80029ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029cc:	2302      	movs	r3, #2
 80029ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029d0:	2300      	movs	r3, #0
 80029d2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80029d4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80029d8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fda8 	bl	8000534 <HAL_RCC_OscConfig>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80029ea:	f000 f875 	bl	8002ad8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ee:	230f      	movs	r3, #15
 80029f0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f2:	2302      	movs	r3, #2
 80029f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f6:	2300      	movs	r3, #0
 80029f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a00:	2300      	movs	r3, #0
 8002a02:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a08:	2102      	movs	r1, #2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fc9a 	bl	8001344 <HAL_RCC_ClockConfig>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002a16:	f000 f85f 	bl	8002ad8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a22:	463b      	mov	r3, r7
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe fe73 	bl	8001710 <HAL_RCCEx_PeriphCLKConfig>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002a30:	f000 f852 	bl	8002ad8 <Error_Handler>
  }
}
 8002a34:	bf00      	nop
 8002a36:	3778      	adds	r7, #120	; 0x78
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a42:	f107 0310 	add.w	r3, r7, #16
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <MX_TIM2_Init+0x98>)
 8002a5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000-1;
 8002a62:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <MX_TIM2_Init+0x98>)
 8002a64:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002a68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <MX_TIM2_Init+0x98>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8002a70:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <MX_TIM2_Init+0x98>)
 8002a72:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002a76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a78:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <MX_TIM2_Init+0x98>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <MX_TIM2_Init+0x98>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a84:	4813      	ldr	r0, [pc, #76]	; (8002ad4 <MX_TIM2_Init+0x98>)
 8002a86:	f7fe fff3 	bl	8001a70 <HAL_TIM_Base_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002a90:	f000 f822 	bl	8002ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a9a:	f107 0310 	add.w	r3, r7, #16
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <MX_TIM2_Init+0x98>)
 8002aa2:	f7ff f95a 	bl	8001d5a <HAL_TIM_ConfigClockSource>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002aac:	f000 f814 	bl	8002ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	4619      	mov	r1, r3
 8002abc:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <MX_TIM2_Init+0x98>)
 8002abe:	f7ff fb57 	bl	8002170 <HAL_TIMEx_MasterConfigSynchronization>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002ac8:	f000 f806 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002acc:	bf00      	nop
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20000ffc 	.word	0x20000ffc

08002ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <HAL_MspInit+0x44>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <HAL_MspInit+0x44>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6193      	str	r3, [r2, #24]
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <HAL_MspInit+0x44>)
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_MspInit+0x44>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <HAL_MspInit+0x44>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	61d3      	str	r3, [r2, #28]
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_MspInit+0x44>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b1e:	2007      	movs	r0, #7
 8002b20:	f7fd fc88 	bl	8000434 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000

08002b30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b40:	d113      	bne.n	8002b6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b42:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <HAL_TIM_Base_MspInit+0x44>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <HAL_TIM_Base_MspInit+0x44>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	61d3      	str	r3, [r2, #28]
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_TIM_Base_MspInit+0x44>)
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	201c      	movs	r0, #28
 8002b60:	f7fd fc73 	bl	800044a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b64:	201c      	movs	r0, #28
 8002b66:	f7fd fc8c 	bl	8000482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000

08002b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b8a:	e7fe      	b.n	8002b8a <HardFault_Handler+0x4>

08002b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b90:	e7fe      	b.n	8002b90 <MemManage_Handler+0x4>

08002b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b92:	b480      	push	{r7}
 8002b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b96:	e7fe      	b.n	8002b96 <BusFault_Handler+0x4>

08002b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b9c:	e7fe      	b.n	8002b9c <UsageFault_Handler+0x4>

08002b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bcc:	f7fd fb42 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <TIM2_IRQHandler+0x10>)
 8002bda:	f7fe ff9f 	bl	8001b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000ffc 	.word	0x20000ffc

08002be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <USART2_IRQHandler+0x10>)
 8002bee:	f7ff fb5d 	bl	80022ac <HAL_UART_IRQHandler>

  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2000103c 	.word	0x2000103c

08002bfc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <SystemInit+0x28>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <SystemInit+0x28>)
 8002c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <SystemInit+0x28>)
 8002c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c16:	609a      	str	r2, [r3, #8]
#endif
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <checksum>:
#include "utils.h"


uint8_t checksum(const uint8_t* buff)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	uint16_t l_checksum = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	81fb      	strh	r3, [r7, #14]
	for(uint8_t idx = 0; idx < 30; ++idx)
 8002c34:	2300      	movs	r3, #0
 8002c36:	737b      	strb	r3, [r7, #13]
 8002c38:	e00a      	b.n	8002c50 <checksum+0x28>
	{
		l_checksum += buff[idx];
 8002c3a:	7b7b      	ldrb	r3, [r7, #13]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	4413      	add	r3, r2
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	89fb      	ldrh	r3, [r7, #14]
 8002c46:	4413      	add	r3, r2
 8002c48:	81fb      	strh	r3, [r7, #14]
	for(uint8_t idx = 0; idx < 30; ++idx)
 8002c4a:	7b7b      	ldrb	r3, [r7, #13]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	737b      	strb	r3, [r7, #13]
 8002c50:	7b7b      	ldrb	r3, [r7, #13]
 8002c52:	2b1d      	cmp	r3, #29
 8002c54:	d9f1      	bls.n	8002c3a <checksum+0x12>
	}
	if(l_checksum == ((buff[30] << 8) | buff[31]))
 8002c56:	89fa      	ldrh	r2, [r7, #14]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	331e      	adds	r3, #30
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	311f      	adds	r1, #31
 8002c64:	7809      	ldrb	r1, [r1, #0]
 8002c66:	430b      	orrs	r3, r1
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d101      	bne.n	8002c70 <checksum+0x48>
		return 1;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <checksum+0x4a>

	return 0;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LED_Switch>:

void LED_Switch(uint8_t* s, unsigned int* value, uint16_t PM2_5)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b085      	sub	sp, #20
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	80fb      	strh	r3, [r7, #6]
	switch(*s)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <LED_Switch+0x1c>
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d051      	beq.n	8002d3c <LED_Switch+0xbe>
		break;
	case 1:

		break;
	default:
		break;
 8002c98:	e051      	b.n	8002d3e <LED_Switch+0xc0>
		if(PM2_5 > 0 && PM2_5 <= 5)
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d006      	beq.n	8002cae <LED_Switch+0x30>
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	2b05      	cmp	r3, #5
 8002ca4:	d803      	bhi.n	8002cae <LED_Switch+0x30>
			*value = 0x00000100;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cac:	601a      	str	r2, [r3, #0]
		if(PM2_5 > 5 && PM2_5 <= 10)
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	d906      	bls.n	8002cc2 <LED_Switch+0x44>
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	2b0a      	cmp	r3, #10
 8002cb8:	d803      	bhi.n	8002cc2 <LED_Switch+0x44>
			*value = 0x00000300;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002cc0:	601a      	str	r2, [r3, #0]
		if(PM2_5 > 10 && PM2_5 <= 15)
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	2b0a      	cmp	r3, #10
 8002cc6:	d906      	bls.n	8002cd6 <LED_Switch+0x58>
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	2b0f      	cmp	r3, #15
 8002ccc:	d803      	bhi.n	8002cd6 <LED_Switch+0x58>
			*value = 0x00000700;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002cd4:	601a      	str	r2, [r3, #0]
		if(PM2_5 > 15 && PM2_5 <= 20)
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	2b0f      	cmp	r3, #15
 8002cda:	d906      	bls.n	8002cea <LED_Switch+0x6c>
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	2b14      	cmp	r3, #20
 8002ce0:	d803      	bhi.n	8002cea <LED_Switch+0x6c>
			*value = 0x00000F00;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002ce8:	601a      	str	r2, [r3, #0]
		if(PM2_5 > 20 && PM2_5 <= 25)
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	2b14      	cmp	r3, #20
 8002cee:	d906      	bls.n	8002cfe <LED_Switch+0x80>
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	2b19      	cmp	r3, #25
 8002cf4:	d803      	bhi.n	8002cfe <LED_Switch+0x80>
			*value = 0x00001F00;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8002cfc:	601a      	str	r2, [r3, #0]
		if(PM2_5 > 25 && PM2_5 <= 30)
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2b19      	cmp	r3, #25
 8002d02:	d906      	bls.n	8002d12 <LED_Switch+0x94>
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	2b1e      	cmp	r3, #30
 8002d08:	d803      	bhi.n	8002d12 <LED_Switch+0x94>
			*value = 0x00003F00;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8002d10:	601a      	str	r2, [r3, #0]
		if(PM2_5 > 30 && PM2_5 <= 35)
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	2b1e      	cmp	r3, #30
 8002d16:	d906      	bls.n	8002d26 <LED_Switch+0xa8>
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	2b23      	cmp	r3, #35	; 0x23
 8002d1c:	d803      	bhi.n	8002d26 <LED_Switch+0xa8>
			*value = 0x00007F00;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002d24:	601a      	str	r2, [r3, #0]
		if(PM2_5 > 35)
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	2b23      	cmp	r3, #35	; 0x23
 8002d2a:	d903      	bls.n	8002d34 <LED_Switch+0xb6>
			*value = 0x0000FF00;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8002d32:	601a      	str	r2, [r3, #0]
		*s = 1;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	701a      	strb	r2, [r3, #0]
		break;
 8002d3a:	e000      	b.n	8002d3e <LED_Switch+0xc0>
		break;
 8002d3c:	bf00      	nop
	}
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d84 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d52:	e003      	b.n	8002d5c <LoopCopyDataInit>

08002d54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002d56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d5a:	3104      	adds	r1, #4

08002d5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d5c:	480b      	ldr	r0, [pc, #44]	; (8002d8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002d60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d64:	d3f6      	bcc.n	8002d54 <CopyDataInit>
	ldr	r2, =_sbss
 8002d66:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002d68:	e002      	b.n	8002d70 <LoopFillZerobss>

08002d6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d6c:	f842 3b04 	str.w	r3, [r2], #4

08002d70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d70:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <LoopForever+0x16>)
	cmp	r2, r3
 8002d72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002d74:	d3f9      	bcc.n	8002d6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d76:	f7ff ff41 	bl	8002bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d7a:	f000 f811 	bl	8002da0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d7e:	f7ff fd43 	bl	8002808 <main>

08002d82 <LoopForever>:

LoopForever:
    b LoopForever
 8002d82:	e7fe      	b.n	8002d82 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d84:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002d88:	08002e48 	.word	0x08002e48
	ldr	r0, =_sdata
 8002d8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d90:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002d94:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002d98:	200010bc 	.word	0x200010bc

08002d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d9c:	e7fe      	b.n	8002d9c <ADC1_2_IRQHandler>
	...

08002da0 <__libc_init_array>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	4e0d      	ldr	r6, [pc, #52]	; (8002dd8 <__libc_init_array+0x38>)
 8002da4:	4c0d      	ldr	r4, [pc, #52]	; (8002ddc <__libc_init_array+0x3c>)
 8002da6:	1ba4      	subs	r4, r4, r6
 8002da8:	10a4      	asrs	r4, r4, #2
 8002daa:	2500      	movs	r5, #0
 8002dac:	42a5      	cmp	r5, r4
 8002dae:	d109      	bne.n	8002dc4 <__libc_init_array+0x24>
 8002db0:	4e0b      	ldr	r6, [pc, #44]	; (8002de0 <__libc_init_array+0x40>)
 8002db2:	4c0c      	ldr	r4, [pc, #48]	; (8002de4 <__libc_init_array+0x44>)
 8002db4:	f000 f820 	bl	8002df8 <_init>
 8002db8:	1ba4      	subs	r4, r4, r6
 8002dba:	10a4      	asrs	r4, r4, #2
 8002dbc:	2500      	movs	r5, #0
 8002dbe:	42a5      	cmp	r5, r4
 8002dc0:	d105      	bne.n	8002dce <__libc_init_array+0x2e>
 8002dc2:	bd70      	pop	{r4, r5, r6, pc}
 8002dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dc8:	4798      	blx	r3
 8002dca:	3501      	adds	r5, #1
 8002dcc:	e7ee      	b.n	8002dac <__libc_init_array+0xc>
 8002dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dd2:	4798      	blx	r3
 8002dd4:	3501      	adds	r5, #1
 8002dd6:	e7f2      	b.n	8002dbe <__libc_init_array+0x1e>
 8002dd8:	08002e40 	.word	0x08002e40
 8002ddc:	08002e40 	.word	0x08002e40
 8002de0:	08002e40 	.word	0x08002e40
 8002de4:	08002e44 	.word	0x08002e44

08002de8 <memset>:
 8002de8:	4402      	add	r2, r0
 8002dea:	4603      	mov	r3, r0
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d100      	bne.n	8002df2 <memset+0xa>
 8002df0:	4770      	bx	lr
 8002df2:	f803 1b01 	strb.w	r1, [r3], #1
 8002df6:	e7f9      	b.n	8002dec <memset+0x4>

08002df8 <_init>:
 8002df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfa:	bf00      	nop
 8002dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfe:	bc08      	pop	{r3}
 8002e00:	469e      	mov	lr, r3
 8002e02:	4770      	bx	lr

08002e04 <_fini>:
 8002e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e06:	bf00      	nop
 8002e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0a:	bc08      	pop	{r3}
 8002e0c:	469e      	mov	lr, r3
 8002e0e:	4770      	bx	lr
